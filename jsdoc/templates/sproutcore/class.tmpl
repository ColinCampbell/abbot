{!
function byName(a, b) {
	if (a.name != undefined && b.name != undefined) {
		a = a.name.toLowerCase();
		b = b.name.toLowerCase();
		if (a < b) return -1;
		if (a > b) return 1;
		return 0;
	}
}

function summarize(desc) {
	if (typeof desc != "undefined")
		return desc.match(/([\w\W]+?\.)[^a-z0-9]/i)? RegExp.$1 : desc;
};

thisClass = data[0];
if (thisClass.methods) thisClass.methods.sort(byName);
if (thisClass.properties) thisClass.properties.sort(byName);
if (thisClass.events) thisClass.events.sort(byName);

function htmlize(desc, stripSummary) {
  if (stripSummary === undefined) stripSummary = true ;
  if (stripSummary) {
    var summary = summarize(desc) ;
    desc = (summary && summary.length > 0) ? desc.slice(summary.length, desc.length) : desc ;
  }

  return superTextile(desc) ;
} ;

rowClass = 'even';
function resetRowClass() { rowClass = 'even'; };

function nextRowClass() {
  var ret = rowClass ;
  rowClass = (rowClass == 'even') ? 'odd' : 'even' ;
  return ret ;
} ;

function hasUsefulParams(params) {
  if (!params || !params.length) return false ;
  var idx = params.length;
  while(--idx >= 0) {
    var param = params[idx] ;
    if (isUsefulParam(param)) return true ;
  }
  return false ;
};

function isUsefulParam(param) {
  if (!param) return false ;
  if (param.type && param.type.length > 0) return true ;
  if (param.desc && param.desc.length > 0) return true ;
  return false ;
} ;

var seen = [] ;
function convertToString(data) {
  try {
    if (seen.indexOf(data) >= 0) return 'SEEN' ;
    seen.push(data) ;
    var ret = data ;
    if (data === null) return 'null' ;
    if (data === undefined) return 'undefined'; 
    if (data instanceof Array) {
      ret = [] ;
      for(var idx=0;idx<data.length;idx++) {
        ret.push(convertToString(data[idx])) ;
      }
      ret = '[' + ret.join(', ') + ']';
    } else if (data instanceof Object) {
      ret = [] ;
      for(var key in data) {
        if (!data.hasOwnProperty(key)) continue ;
        ret.push(key + ': ' + convertToString(data[key])) ;
      }
      ret = '{ ' + ret.join(",\n") + ' }' ;
    } else if (data.toString) ret = data.toString() ;
  }
  
  catch(e) { ret = 'EXCEPTION'; }
  return ret ;
};

!}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset={+(JsDoc.opt.e||'utf-8')+}">
	<title>JsDoc: {+thisClass.alias+}</title>
	<link rel=stylesheet href="default.css" type="text/css" media=screen>
</head>

<body class="sc-theme">

<h1>
  {+thisClass.alias+} <if test="thisClass.isStatic">Module</if><if test="!thisClass.isStatic">Class</if> Reference
</h1>

<table class="summary">
{! resetRowClass(); !}

<if test="thisClass.deprecated">
  <tr class="{+ nextRowClass() +}">
    <td class="label">Deprecated:</td>
    <td class="value">
      {+htmlize(thisClass.deprecated.desc)+}
    </td>
  </tr>
</if>

<if test="thisClass.augments && thisClass.augments.length">
  <tr class="{+ nextRowClass() +}">
    <td class="label">Extends:</td>
    <td class="value">
      <for each="augment" in="thisClass.augments"><a href="{+augment+}.html">{+augment+}</a><if test="augment != thisClass.augments[thisClass.augments.length-1]"> : </if></for>
    </td>
  </tr>
</if>

<if test="thisClass.source">
  <tr class="{+ nextRowClass() +}">
    <td class="label">Defined in:</td>
    <td class="value">{+thisClass.filename+}</td>
  </tr>
</if>

<if test="thisClass.since">
  <tr class="{+ nextRowClass() +}">
    <td class="label">Availability:</td>
    <td class="value">
      since {+thisClass.since+}
    </td>
  </tr>
</if>

<if test="thisClass.doc">
<for each="version" in="thisClass.doc.getTag('version')">
  <tr class="{+ nextRowClass() +}">
    <td class="label">Version:</td>
    <td class="value">{+version+}</td>
  </tr>
</for>
</if>

</table>

<if test="thisClass.classDesc">
<div class="description">
{+htmlize(thisClass.classDesc, false)+}
</div>
</if>

<!-- =========== FIELD SUMMARY =========== -->
<if test="thisClass.properties.length">
<div class="field-summary summary">

<h2>Field Summary</h2>
<ul>
<for each="property" in="thisClass.properties">
  <li>
    <a href="#{+property.name+}"><code class="type"><if test="property.isStatic||!property.memberof">+</if><if test="!(property.isStatic||!property.memberof)">-</if>&nbsp;(<if test="property.isPrivate">private&nbsp;</if>{+(property.type||"object")+}) {+property.name+}</code></a>
    <div class="description">{+summarize(property.desc)+}</div>
  </li>
</for>
</ul>

</div>
</if>
<!-- =========== END FIELD SUMMARY =========== -->

<!-- ========== METHOD SUMMARY =========== -->
<if test="thisClass.methods.length || thisClass.inherited">
<h2>Method Summary</h2>
</if>

<if test="thisClass.methods.length">
  <div class="method-summary summary">
  <ul>
  <for each="method" in="thisClass.methods">
    <li>
      <a href="#{+method.name+}"><code class="type"><if test="method.isStatic||!method.memberof">+</if><if test="!(method.isStatic||!method.memberof)">-</if>&nbsp;<if test="method.isPrivate">private&nbsp;</if><if test="method.returns.length"><for each="ret" in="method.returns">&nbsp;{+ret.type+}</for></if> {+method.name+}({+method.signature()+})</code></a>
      <div class="description">{+summarize(method.desc)+}</div>
    </li>
  </for>
  </ul>

  </div>
</if>

<!-- ========== INHERITED METHODS SUMMARY =========== -->
<if test="thisClass.inherited">
{! inheritedCnt = 0; !}
<div class="method-summary summary">
<for each="className" in="keys(thisClass.inherited)">
  
{! inheritedCnt++; !}
<h4>Inherited from <a href="{+className+}.html">{+className+}</a> 
<span id='show-link-{+inheritedCnt+}'>(<a href="javascript:;" onclick="$$('ul.inherited-{+inheritedCnt+}').invoke('show'); $('hide-link-{+inheritedCnt+}').show(); $('show-link-{+inheritedCnt+}').hide();">show</a>)</span>
<span id="hide-link-{+inheritedCnt+}" style="display:none;">(<a href="javascript:;" onclick="$$('ul.inherited-{+inheritedCnt+}').invoke('hide'); $('hide-link-{+inheritedCnt+}').hide(); $('show-link-{+inheritedCnt+}').show();">hide</a>)</span></h4>
<ul class="inherited-{+inheritedCnt+}" style="display:none;">
<for each="method" in="thisClass.inherited[className]">
<li>
    <a href="{+(method.memberof || method.name)+}.html#{+method.name+}"><code class="type"><if test="method.isStatic||!method.memberof">+</if><if test="!(method.isStatic||!method.memberof)">-</if>&nbsp;<if test="method.isPrivate">private&nbsp;</if><if test="method.returns.length"><for each="ret" in="method.returns">&nbsp;{+ret.type+}</for></if> {+method.name+}({+method.signature()+})</code></a>
    <div class="description">{+summarize(method.desc)+}</div>
  </li>
</for>
</ul>

</for>
</div>
</if>

<!-- ========== END INHERITED METHODS SUMMARY =========== -->

<!-- ============ FIELD DETAIL START ========= -->
<if test="thisClass.properties.length">
<div class="field-detail detail">
<a name="field_detail"> </a> 
<h2>Field Details</h2>

<for each="property" in="thisClass.properties">

<!-- One single method detail entry -->
<div class="field">
<a name="{+property.name+}"></a> 
<h3>{+property.name+}</h3>
<p class="summary">{+summarize(property.desc)+}</p>

<if test="property.deprecated">
<p class="deprecated">Deprecated {+property.deprecated.desc+}</p>
</if>

<p class="signature"><if test="property.isStatic||!property.memberof">+</if><if test="!(property.isStatic||!property.memberof)">-</if>&nbsp;<span class="type"><if test="property.isPrivate">private&nbsp;</if>{+(property.type||"object")+}</span> <span class="name">{+property.name+}</span></p> 

<h5>Discussion</h5>	
<div class="description">
{+htmlize(property.desc)+}
</div>

<if test="property.doc.getTag('since') && property.doc.getTag('since').length > 0">
<h5>Availability</h5>	
<for each="since" in="property.doc.getTag('since')">
<div class="since">Since {+since+}</div>
</for>
</if>

</div>
</for>

</div>
</if>
<!-- ============ FIELD DETAIL END ========== -->

<!-- ============ METHOD DETAIL START ======= -->

<if test="thisClass.methods.length">
  <div class="method-detail detail">
    <a name="method_detail"> </a> 
    <h2>Method Details</h2>

    <for each="method" in="thisClass.methods">

      <!-- One single method detail entry -->
      <div class="method">
      <a name="{+method.name+}"></a> 
      <h3>{+method.name+}()</h3>
      <p class="summary">{+summarize(method.desc)+}</p>

      <if test="method.deprecated">
      <p class="deprecated">Deprecated {+method.deprecated.desc+}</p>
      </if>

      <p class="signature"><if test="method.isStatic||!method.memberof">+</if><if test="!(method.isStatic||!method.memberof)">-</if>&nbsp;<span class="type"><if test="method.isPrivate">private&nbsp;</if><if test="method.returns.length"><for each="ret" in="method.returns">{+ret.type+}&nbsp;</for></if></span> <span class="name">{+method.name+}</span><span class="params">({+method.signature()+})</span></p> 

      <!-- METHOD PARAMETERS START -->
      <if test="hasUsefulParams(method.params)">
      <h5>Parameters</h5>
      <for each="param" in="method.params">
      <if test="isUsefulParam(param)">
        <dt><if test="param.type"><span class="type">{+param.type+}</span>&nbsp;</if><span class="name">{+param.name+} </span></dt>
        <if test="param.desc">
        <dd>{+param.desc+}</dd>
        </if>
      </if>
      </for>
      </if> 
      <!-- METHOD PARAMETERS END -->

      <!-- ADDITIONAL ATTRIBUTES START -->
      <if test="method.returns.length">
      <h5>Return Value</h5>
      <for each="ret" in="method.returns">
        <p class="return-value">
          <if test="ret.type"><span class="type">{+ret.type+}</span>&nbsp;-&nbsp;</if>
          <span class="description">{+ret.desc+}</span> 
        </p>
      </for>
	    </if>

      <if test="method.exceptions.length">
      <h5>Throws Exceptions</h5>
	    <for each="ex" in="method.exceptions">
	      <p class="exception">
	        <if test="ex.type"><span class="type">{+ex.type+}</span>&nbsp;-&nbsp;</if> 
	          <span class="description">{+ex.desc+}</span>
	      </p>
	    </for>
	    </if> 
      <!-- ADDITIONAL ATTRIBUTES  END -->

      <h5>Discussion</h5>	
      <div class="description">
      {+htmlize(method.desc)+}
      </div>

      <if test="method.doc.getTag('since') && method.doc.getTag('since').length > 0">
      <h5>Availability</h5>	
      <for each="since" in="method.doc.getTag('since')">
      <div class="since">Since {+since+}</div>
      </for>
      </if>

      </div>



	  </for>
	  
	</div>
</if>
<!-- ============ METHOD DETAIL END ========== -->

<div class="jsdoc_ctime">Documentation generated by <a href="http://jsdoctoolkit.org/" target="_parent">JsDoc Toolkit</a> {+JsDoc.VERSION+} on {+new Date()+}</div>

<script src="prototype.js"></script>

</body>
</html>
