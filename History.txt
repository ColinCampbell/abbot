== SVN HEAD

* [FIX] offsetParent, frame, clippingFrame, and innerFrame would all sometimes
return the wrong values in Firefox because of a bug that returns the wrong
offsetLeft and offsetTop when a parent element has a border.

* Fixed all SC unit tests that were failing (now that I can run them again).

* Test Runner now has a "Rerun Current Test" button that will rerun the 
current test.

* Added convenience method $I() (or SC.inspect()) - converts an object to a 
hash and then displays its key/value pairs.  Useful for debugging.

* Fixed up test templates in generators so that they check for the presence
of main() before trying to fix it up.  This was causing errors on new tests when added to frameworks.

* [FIX] invokeWhile() was implemented on real Array objects but not on 
SC.Array mixin.  This caused the controllers/controller test to fail.  Now 
fixed.

* Updated test runner to use new SproutCore.

* [FIX] The JSDoc template will now try to group items based on their full path, rather than just the top-most directory.  This means views stored under views/buttons, for example, now appear in the group VIEWS/BUTTONS in the UI.

* Moved the base class for collections, buttons, and fields into their respective folders.  This will appear them to appear under the correct location in the Doc viewer.

* [FIX] Grouped views in the source list without a visible header will 
overlapping the following group, absorbing their clicks.  Now they render
the proper size.

* SC.SliderView provides a horizontal slider.  No vertical slider is currently
planned since those controls are so rare.  If someone really needs one, please
enhance SC.SliderView to support it!

* slider_view helper creates a slider view + html

* Add example to sample_controls

* Converted docs for drag modules to JSDoc format.

* SourceListGroupViews now automatically collapse their group title if the
group value is null.  Items will still be shown; they will just appear to be 
"top level"

* JSDocs template was cutting the first sentance from a class description. This is now fixed.
 
* Added sc-build -d option to generate docs along with the build of your code.

* Updated sc_docs to work with updated SproutCore.  Also adopts new look and feel and includes support for live search on all symbols defined in the 
library (try it; it's cool - visit: http://localhost:4020/sproutcore/-docs)

* JSDoc template no longer generated highlighted JS source along with ref
docs.  This was slowing things down and the output wasn't really that great
anyway.

* Tweaked JSdoc's Textile support to accept '-' as a bullet characters.  Since
jsdoc strips all * at the beginning of lines you could not do bulletted lists
before.  Now you can using -.

* Updated design of jsdoc documentation to make it easier to read.

* Renamed buttons-sprite.png to sc-theme-sprite.png. Added 
sc-theme-ysprite.png.  One is now used to hold all repeat-x and non-repeating 
sprites while the other is used for repeat-y sprites only.

* SC.SplitView & SC.SplitDividerView provide support for draggable and 
collapsable split views.

* SC.ListView now uses SC.ListItemView as its default example view instead of
SC.LabelView (or the old SC.TextCellView)

* Optimized performance of new build system when reloading ruby helpers on 
every page load

* The Source List now provides support for the disclosure triangle.  A disclosure is automatically shown if you have grouping enabled and you set the
groupVisibleKey property to anything other an null.  The disclosure does not 
yet auto-reveal during a drag.

* SC.DisclosureView - Shows a disclosure triangle button.

* [FIX] Left over calls to SC.TextCellView.  Replaced with SC.LabelView.

* SC.WorkspaceView is now removed from the framework.  It was always intended
for use in Sproutit applications and it is really too specific for such a generic framework.

* SC.LabelView gets a new API!  Now in line with other SC.Control based
classes.  Set value for the value, content/contentValueKey to display part
of some content.

* You can add view helpers to your own projects just by dropping them into 
a lib directory inside your framework or client.  If you need to load your
view helpers in a certain order, use the view_helper() method.  See the view helpers in SproutCore for an example usage.

* The build system now reloads view helpers each time you load a page.  This
means you no longer need to restart the sc-server when you make a change to
the view helper code.

* SproutCore view helpers are now stored in the framework itself along with
the JavaScript.  This will make it easier to include the latest version of 
the SproutCore framework in you app without having to install a new set of
build tools.  This should basically eliminate the only frequently changing 
part of the build tools.

* SC.SourceList and SC.ListItemView properties now use "content..Key" 
convention for naming properties.  If you have built code with the old
"content..Property" conventions, you will need to update your code.

* Added hint property to text_area_view helper that is required to display ghost text.

* added new SC.CheckboxView and SC.RadioView for creating simulated checkbox
and radio buttons.  These buttons have more functions than their platform
native counterparts including mixed style and full styling support.

* Moved field view subclasses to views/field directory.

* Added SC.Validatable mixin that can be applied to any view to make it work
with validators.  SC.FieldView now incorporates this mixin.

* Now if you add initMixin() to a mixin, it will be called automatically 
whenever an object that includes the mixin is instantiated.  You can use this
to perform any setup necessary for the mixin.

* Renamed SC.Control.contentValueProperty to SC.Control.contentValueKey to
be consistent with the rest of the API.

* Added updateContentWithValueObserver to SC.Control that will relay changes
to the value property back to the content object if you use the default 
implementation.

* Changed SC.Control observers for various states that were once private to 
public methods.  This way you can override them in your subclasses if you need
to perform some extra processing and you want to make sure you do them in the 
right order.  You can also just add more observers as well.

* Added JSDoc info for Validators, SC.FieldView, SC.CheckboxFieldView

* Switched some Sc Theme CSS to use sc-button-view classname instead of more
generic a.button or a.regular.

* Added new addClassName, removeClassName, setClassName and hasClassName
methods on SC.View that are 7x faster than prototype's version.

* Integrated SC.Control into SC.ButtonView

* Changed SC.ButtonView.labelText and SC.ButtonView.labelSelector to 
SC.ButtonView.title and SC.ButtonView.titleSelector to be more consistant with current naming conventions.

* [FIX] Some doc tags were wrong in SC.ScrollView and others.

* Improved documentations on SC.ImageView.

* SC.ImageView now includes the SC.Control mixin and can accept either a 
CSS class name or a URL as its value.  This makes it easy to switch an image
from using a sprite to use a custom-generated image and back again.

* SproutCore now includes some shared standard icons that you can use in your
own application, courtesy of IconDrawer (http://www.icondrawer.com).

* Generalized SC.Control's observer so that you can now use it to observe
changes to multiple properties on content.  This should capture a very common pattern requires by collection item views.  Most control-list SC.Views will
eventually adopt this mixin.

* Added ListItemView which will be used for rendering content in list views 
and source list views.  ListViewItem can render a name, icon, and optional
unread count.

* Changed displayProperty in SC.CollectionView to contentValueKey to match the new SC.Control pattern.

* SC.Control now has built in support for a value and content property.  The value property is typically the value the control displays, while content is an object that you might pull a content value from.  You can determine the proeprty of the content object to use as a value by setting the 'contentValueKey'.  The contentValueKey can also be provided by the displayDelegate.

* Added SC.DelegateSupport mixin that can be used to support the delegate pattern.

* [FIX] Selection management would throw exception after a drag and drop.

* [FIX] Optimization in fmt() would through an exception if you passed it a
value that did not support toString().

* Moved selection management methods from CollectionController in independent 
SC.SelectionSupport mixin.  This mixin is now used by both 
SC.CollectionController and SC.ArrayController so you can use either one to 
manage a selection state.  You can also apply this mixin to your own 
controllers to manage selection state if you like (though this is not required 
to manage selections.)

* Began to separate CSS rules into a core.css and a theme.css.  The core.css 
styles are generally required by SproutCore and should apply even if you build 
your own theme.  The theme.css rules apply to the SproutCore theme only and 
can be overriden by your own CSS.

* Added SC.SourceListView and sc-theme styles for source lists.  Source lists 
support grouping if you enable this feature.  See the new Collections2 tab in 
the SampleControls app for an example source list.

* Added SC.TableView.  This feature is in progress.    See the new 
Collections2 tab in the SampleControls app for an example table view.

* Changed asHTML and asText properties to innerHTML and innerText to match 
their DOM equivalents.

* Renamed SC.CollectionItem mixin to SC.Control mixin.  SC.Control mixin now 
provides some standard functionality for all interactive controls such as 
handling selection states, enabled and focus states.

* Removed support for :resize_options property in view helper, since 
auto-resizing is no longer supported in SC.View (it never worked right anyway 
and was not functionally very usable.)

* innerText property now uses TextNodes, making it about 50% faster than 
innerHTML on FireFox.

* Added view helpers for list_view, scroll_view, grid_view, source_list_view, 
and table_view.  Also refactored collection view helpers into their own file.

* [FIX] CollectionView is now able to render items in groups.  

* [FIX] SC.ObjectController: Avoid unwanted commit when oldValue == null && newValue == ''.  


== 0.9.0 2008-03-08

* 1 major enhancement:
  * Initial release of the new BlueRibbon train build system
