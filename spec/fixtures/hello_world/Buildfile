# This is a sample buildfile for a GCC driven project.  The project will find
# all .c files and compile them to a target matching the name of the parent
# directory by default.  The output will be stored in 'builds' and staging in
# 'staging'

####################################
# CONFIGURATION
#

# Set the name and type for this project.  If this is not defined here it will
# be assumed from the global environment settings
project :hello_world => :cc

# Setup some default configuration
config :all, :build_path =>   './builds', 
             :staging_path => './staging',
             :compiler => 'gcc',
             :linker => 'ln'

####################################
# DESCRIBE A CC PROJECT
#
project :cc do
  
  # Describe the target type
  target :default do
    
    # Finding the target is easy...it's just the project root.
    task :find do
      PROJECT.add_target :source_root => PROJECT.project_root
    end

    # The default target has a manifest:prepare task that catalogs 
    # entires.  Let's now go through and hide all .h files
    manifest :hide_headers => :catalog_entries do
      MANIFEST.entries.each { |e| e.hide! if e.ext == 'h' }
    end
    manifest :prepare => :hide_headers
    
    # Next we need synthesize entries that will compile objects for anything
    # with a '.c' extension.  Also find includes and match those.
    manifest :to_objects => :catalog_entries do
      MANIFEST.entries.each do |entry|
        next if entry.ext != 'c'
        
        # find headers that are referenced in this file via #include "foo.h"
        src = entry.search_source(/^\s*#include\s+"(.+)"/)
        src.map do |header|
          header = header.to_a[1] # get match
          MANIFEST.entry_for(header) # look for matching entry
        end
        src.compact!
        src << entry # add original entry
        
        MANIFEST.add_composite entry.filename.ext('o'),
          :build_task => :compile_cc,
          :from => src
      end
    end
    
    # Finally, we need to add a composite that will produce the final 
    # target.
    manifest :final => :to_objects do 
      entries = MANIFEST.entries.reject { |e| e.ext != 'o' }
      MANIFEST.add_composite File.basename(TARGET.target_name),
        :build_task => :link,
        :from => entries
      end
    end
    
  end
  
  # Thus ends the targets.
  # Now let's define some useful build tasks.  You can add any others 
  # that you want.  Note that the default build task only runs if the dst
  # file is older than src files.
  build_task :compile_cc do
    sh "#{CONFIG.compiler} #{SRC_PATHS * ' '} -o #{DST_PATH} #{CONFIG.build_flags}"
  end
  
  build_task :link do
    sh "#{CONFIG.linker} #{SRC_PATHS} -o #{DST_PATH}"
  end
  
end

    
    
    
